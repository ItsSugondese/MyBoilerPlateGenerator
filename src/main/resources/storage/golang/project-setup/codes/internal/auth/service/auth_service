package service

import (
	"os"
	"?pname/enums/struct-enums/user_type_enums"
	"?pname/internal/auth/dto"
	user_navigator "?pname/internal/user/user-navigator"
	"?pname/pkg/utils"
	paseto_token "?pname/pkg/utils/paseto-token"
	"time"
)

func LoginService(authRequest dto.AuthRequest) dto.AuthResponse {
	switch authRequest.UserType {
	case user_type_enums.UserType.CUSTOMER, user_type_enums.UserType.ADMIN:
		return loginUser(authRequest)
	default:
		panic("invalid user type")
	}
}

func loginUser(authRequest dto.AuthRequest) dto.AuthResponse {
	userDetails := user_navigator.FindUserByEmailService(authRequest.Email)

	err := utils.VerifyPassword(userDetails.Password, authRequest.Password)
	if err != nil {
		panic(err)
	}

	maker := *paseto_token.TokenMaker

	token, err := maker.CreateToken(userDetails.ID.String(), 21600)
	if err != nil {
		panic(err)
	}

	return dto.AuthResponse{
		Token: token,
	}
}

func createToken(userID string) (string, error) {
	privateKey := os.Getenv("ACCESS_TOKEN_PRIVATE_KEY")
	expireTime := os.Getenv("ACCESS_TOKEN_EXPIRED_IN")
	expireDuration, err := time.ParseDuration(expireTime)
	if err != nil {
		return "", err
	}

	return utils.CreateToken(expireDuration, userID, privateKey)
}
