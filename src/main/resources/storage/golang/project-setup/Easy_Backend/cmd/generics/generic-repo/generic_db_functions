package generic_repo

import (
	"reflect"

	"gorm.io/gorm"
)

type OnlyStructs interface {
	~struct{}
}

func SaveRepo[T any](tx *gorm.DB, model T) (T, error) {
	result := tx.Create(&model)
	return model, result.Error
}

func UpdateRepo[T any](tx *gorm.DB, model T) (T, error) {
	result := tx.Model(&model).
		Updates(&model)

	return model, result.Error
}

func DeleteByStructRepo[T any](tx *gorm.DB, model T) error {
	// Use reflection to set the 'IsDeleting' field to true, if it exists
	val := reflect.ValueOf(&model)

	// If model is a pointer, get the element it points to
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	// Check if 'IsDeleting' field exists and is a boolean
	if field := val.FieldByName("IsDeleting"); field.IsValid() && field.Kind() == reflect.Bool {
		field.SetBool(true)
	}

	result := tx.Model(&model).Updates(&model)
	return result.Error
}
