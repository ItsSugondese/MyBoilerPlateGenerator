package service

import (
	generic_repo "?pname/generics/generic-repo"
	?snake_navigator "?pname/internal/?same/?same-navigator"
	"?pname/internal/?same/dto"
	"?pname/internal/?same/model"
	"?pname/internal/?same/repo"
	"?pname/pkg/common/database"
	pagination_utils "?pname/pkg/utils/pagination-utils"
	"encoding/json"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
)

func Save?uService(ctx *gin.Context, dto dto.?uRequest) (model.?u) {
	tx := database.DB.Begin()
	tx.WithContext(ctx)
	var saved?u model.?u

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		tx.Rollback()
		panic(err)
	}

	return saved?u
}

func GetAll?u() []model.?u {
	response, err := repo.FindAll?uRepo()

	if err != nil {
		panic(err)
	}
	return response
}

func FindAll?usPaginatedService(ctx *gin.Context, request dto.?uPaginationRequest) *pagination_utils.PaginationResponse {
	return repo.FindAll?uPaginatedRepo(request, pagination_utils.PaginationResponse{})
}

func Get?uDetailsByIdService(id uuid.UUID) *dto.?uResponse {
	var ?lResponse dto.?uResponse
    details := ?snake_navigator.Find?uByIdService(id)

	jsonData, _ := json.Marshal(details)
	jsonUnmarshalError := json.Unmarshal(jsonData, &?lResponse)
	if jsonUnmarshalError != nil {
		panic(jsonUnmarshalError)
	}

	return &?lResponse
}

func Delete?uByIdService(?lId uuid.UUID) {
	tx := database.DB.Begin()

	?lDetails := ?snake_navigator.Find?uByIdService(?lId)


	// Delete the user location
	err := generic_repo.DeleteByStructRepo(tx, ?lDetails)
	if err != nil {
		panic(err)
	}

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		panic(err)
	}
}
--noUUID--
func Get?uDetailsByIdService(id string) *dto.?uResponse {
	var ?lResponse dto.?uResponse
	details := ?snake_navigator.Find?uByIdService(id)

	jsonData, _ := json.Marshal(details)
	jsonUnmarshalError := json.Unmarshal(jsonData, &?lResponse)
	if jsonUnmarshalError != nil {
		panic(jsonUnmarshalError)
	}

	return &?lResponse
}

func Delete?uByIdService(?lId string) {
	tx := database.DB.Begin()

	?lDetails := ?snake_navigator.Find?uByIdService(?lId)

	// Delete the user location
	err := generic_repo.DeleteByStructRepo(tx, ?lDetails)
	if err != nil {
		panic(err)
	}

	// Commit the transaction
	if err := tx.Commit().Error; err != nil {
		panic(err)
	}
}
