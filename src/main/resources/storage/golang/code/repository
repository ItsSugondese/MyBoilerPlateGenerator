package repo

import (
	generic_repo "?pname/generics/generic-repo"
	"?pname/internal/?same/model"
	"?pname/internal/?same/dto"
	dto_utils "?pname/pkg/utils/dto-utils"
	pagination_utils "?pname/pkg/utils/pagination-utils"

	"?pname/pkg/common/database"

	"errors"

	"github.com/google/uuid"
	"gorm.io/gorm"
)

func FindAll?uPaginatedRepo(pagination dto.?uPaginationRequest, response pagination_utils.PaginationResponse) *pagination_utils.PaginationResponse {

	query := `
    `

	// Store the results in a map
	var resultMap []map[string]interface{}
	database.DB.Scopes(generic_repo.RawQueryPaginate(&pagination.PaginationRequest, &response, database.DB, query, )).Find(&resultMap)
	tempDtos := dto_utils.ConvertSlice[map[string]interface{}, dto.?uResponse](resultMap)

	response.Data = tempDtos
	return &response
}

